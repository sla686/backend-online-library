openapi: 3.0.1
servers:
  - description: SwaggerHub API
    url: HTTP
  - description: SwaggerHub API
    url: HTTPS
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /admin:
    get:
      tags:
        - developers
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      security:
        BearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - firstname
                    - lastname
                    - email
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: d290f1ee-6c54-4b01-90e6-d701748f0851
                    firstname:
                      type: string
                      example: Johnny
                    lastname:
                      type: string
                      example: nylund
                    email:
                      type: string
                      example: you@company.com
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an inventory item
      description: Adds an item to the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User%20Item'
        description: Inventory item to add
  /books:
    get:
      tags:
        - developers
      summary: searches Books
      operationId: searchBooks
      description: |
        By passing in the appropriate options, you can search for
        available Books in the system
      security:
        BearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1books/post/requestBody/content/application~1json/schema'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds a book item
      description: Adds a book item to the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - isbn
                - title
                - description
                - publisher
                - authors
                - status
                - borrower_id
                - published_date
                - borrow_date
                - return_date
              properties:
                isbn:
                  type: string
                  format: uuid
                  example: 978-1781250914
                title:
                  type: string
                  example: Mastery
                description:
                  type: string
                  example: A book on mastery
                publisher:
                  type: string
                  format: null
                  example: Integrify Publishing Ltd
                authors:
                  type: string
                  example: Jim Ron
                status:
                  type: string
                  example: borrowed
                borrower_id:
                  type: string
                  example: d290f1ee-6c54-4b01-90e6-d701748f0851
                published_date:
                  type: string
                  format: date-time
                  example: '2016-08-29T09:12:33.001Z'
                borrow_date:
                  type: string
                  format: date-time
                  example: '2016-08-29T09:12:33.001Z'
                return_date:
                  type: string
                  format: date-time
                  example: '2016-08-29T09:12:33.001Z'
        description: Inventory item to add
    delete:
      tags:
        - admins
      summary: removes a book item
      description: Delete books
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: string id of book to delete
      responses:
        '200':
          description: book that was deleted
  /users:
    get:
      tags:
        - developers
      summary: searches users
      operationId: searchUsers
      description: |
        By passing in the appropriate options, you can search for
        available users in the system
      security:
        BearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
        - in: query
          name: id
          description: get the id of a user
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1admin/get/responses/200/content/application~1json/schema/items'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds a user item
      description: Adds a user to the system
      security:
        BearerAuth: []
      parameters:
        - in: query
          name: name
          description: name of the user
          required: true
          schema:
            type: string
        - in: query
          name: email
          description: email of the user
          required: true
          schema:
            type: string
        - in: query
          name: password
          description: password of the user
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/paths/~1admin/get/responses/200/content/application~1json/schema/items'
        description: Inventory item to add
    delete:
      tags:
        - admins
      summary: removes a user
      description: Delete users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: string id of user to delete
      responses:
        '200':
          description: User that was deleted
  /authors:
    get:
      tags:
        - developers
      summary: searches authors
      operationId: searchAuthors
      description: |
        By passing in the appropriate options, you can search for
        available authors in the system
      security:
        BearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1authors/post/requestBody/content/application~1json/schema'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an author item
      description: Adds an author item to the system
      security:
        BearerAuth: []
      responses:
        $ref: '#/paths/~1authors/get/responses'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - firstname
                - lastname
                - email
              properties:
                id:
                  type: string
                  format: uuid
                  example: d290f1ee-6c54-4b01-90e6-d701748f0851
                firstname:
                  type: string
                  example: Johnny
                lastname:
                  type: string
                  example: nylund
                email:
                  type: string
                  example: you@company.com
        description: Author item to add
    delete:
      tags:
        - admins
      summary: removes an author
      description: Delete authors
      parameters:
        - in: path
          name: authorId
          schema:
            type: string
          required: true
          description: string id of user to delete
      responses:
        '200':
          description: User that was deleted
components:
  schemas:
    User Item:
      type: object
      required:
        - id
        - firstname
        - lastname
        - email
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstname:
          type: string
          example: Johnny
        lastname:
          type: string
          example: nylund
        email:
          type: string
          example: you@company.com
    Manufacturer:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: 'https://www.acme-corp.com'
        phone:
          type: string
          example: 408-867-5309
      type: object
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://example.com/oauth/authorize'
          tokenUrl: 'https://example.com/oauth/token'
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
