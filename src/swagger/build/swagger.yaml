openapi: 3.0.1
servers:
  - description: SwaggerHub API
    url: HTTP
  - description: SwaggerHub API
    url: HTTPS
info:
  description: Library API
  version: 1.0.0
  title: Simple library API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: Operations available to regular users
paths:
  /books:
    get:
      tags:
        - admins
        - users
      summary: Get all books
      description: You can access the list of all books by using this endpoint
      security:
        BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: null
              type: array
              $ref: '#/components/schemas/Book%20schema'
    post:
      tags:
        - admins
      summary: Adds a book
      description: You can create a new book by using this endpoint
      security:
        BearerAuth: []
      responses:
        '201':
          description: Created
        '400':
          description: Invalid input or object
        '409':
          description: The specified book's object already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book%20schema'
        description: Book object to add
  '/books/{bookId}':
    get:
      tags:
        - users
        - admins
      summary: Get a single book
      description: You can get a single book by adding the id as a parameter
      parameters:
        - name: bookId
          in: path
          required: true
          description: id of the book
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book%20schema'
        '400':
          description: Bad id parameter
        '404':
          description: Book not found
    patch:
      tags:
        - admins
      summary: Updates a book
      description: You can update an existing book by sending an object and providing the id of the book you want to update
      security:
        BearerAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Invalid input or object
        '404':
          description: Book not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book%20schema'
        description: Book object to update
    delete:
      tags:
        - admins
      summary: Removes a book
      description: Removes a book by adding the id as the parameter
      parameters:
        - in: path
          name: bookId
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
          description: id of book to delete
      responses:
        '204':
          description: No context - successfully deleted
        '404':
          description: Book not found
  /users:
    get:
      tags:
        - admins
      summary: Get all users
      description: You can access the list of all users by using this endpoint
      security:
        BearerAuth: []
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
        - in: query
          name: id
          description: get the id of a user
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User%20schema'
    post:
      tags:
        - admins
      summary: Adds a user
      description: You can create a new user by using this endpoint
      security:
        BearerAuth: []
      responses:
        '201':
          description: Created
        '400':
          description: Invalid input or object
        '409':
          description: The specified book's object already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User%20schema'
        description: User object to add
  '/users/{userId}':
    get:
      tags:
        - admins
      summary: Get a single user
      description: You can get a single user by adding the id as a parameter
      parameters:
        - name: userId
          in: path
          required: true
          description: id of the user
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User%20schema'
        '400':
          description: Bad id parameter
        '404':
          description: User not found
    patch:
      tags:
        - admins
      summary: Updates a user
      description: You can update an existing user by sending an object and providing the id of the user you want to update
      security:
        BearerAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Invalid input or object
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User%20schema'
        description: User object to update
    delete:
      tags:
        - admins
      summary: Removes a user
      description: Removes a user by adding the id as the parameter
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
          description: id of user to delete
      responses:
        '204':
          description: No context - successfully deleted
        '404':
          description: User not found
  /authors:
    get:
      tags:
        - admins
        - users
      summary: Get all authors
      description: You can access the list of all authors by using this endpoint
      security:
        BearerAuth: []
      parameters: null
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author%20schema'
        '400':
          description: Bad input parameter
    post:
      tags:
        - admins
      summary: Adds an author
      description: You can create a new author by using this endpoint
      security:
        BearerAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author%20schema'
        '400':
          description: Bad input
        '409':
          description: The specified author's object already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author%20schema'
        description: Author object to add
  '/authors/{authorId}':
    get:
      tags:
        - users
        - admins
      summary: Get a single author
      description: You can get a single author by adding the id as a parameter
      parameters:
        - name: authorId
          in: path
          required: true
          description: id of the author
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author%20schema'
        '400':
          description: Bad input parameter
        '404':
          description: Author not found
    patch:
      tags:
        - admins
      summary: Updates an author
      description: You can update an existing author by sending an object and providing the id of the author you want to update
      security:
        BearerAuth: []
      parameters:
        - name: authorId
          in: path
          required: true
          description: id of the author you want to update
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author%20schema'
        '400':
          description: Bad input parameter
        '404':
          description: Author not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author%20schema'
    delete:
      tags:
        - admins
      summary: Removes an author
      description: Removes an author by adding the id as the parameter
      parameters:
        - in: path
          name: authorId
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
          description: id of the author to delete
      responses:
        '204':
          description: No context - successfully deleted
        '404':
          description: Author not found
components:
  schemas:
    Book schema:
      type: object
      required:
        - isbn
        - title
        - description
        - publisher
        - authors
        - status
        - borrower_id
        - published_date
        - borrow_date
        - return_date
      properties:
        id:
          type: number
          description: auto generated id of the book
          example: 1
        isbn:
          type: number
          format: uuid
          example: 978-1781250914
        title:
          type: string
          example: Mastery
        description:
          type: string
          example: A book on mastery
        publisher:
          type: string
          format: null
          example: Integrify Publishing Ltd
        authors:
          type: string
          example: Jim Ron
        status:
          type: string
          example: borrowed
        borrower_id:
          type: number
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        published_date:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        borrow_date:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        return_date:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
    User schema:
      type: object
      required:
        - id
        - firstname
        - lastname
        - email
        - role
      properties:
        id:
          type: number
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstname:
          type: string
          example: Johnny
        lastname:
          type: string
          example: nylund
        email:
          type: string
          example: you@company.com
        role:
          type: string
          example: admin
    Author schema:
      type: object
      required:
        - id
        - firstname
        - lastname
        - email
      properties:
        id:
          type: number
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstname:
          type: string
          example: Johnny
        lastname:
          type: string
          example: nylund
        email:
          type: string
          example: you@company.com
